
cat builtins_utils.c cmd_list_utils.c execution.c ft_cd.c ft_echo.c ft_env.c f
t_exit.c ft_export.c ft_pwd.c ft_unset.c main.c pa
rsing.c path.c print_lists.c redir_list_utils.c si
gnals.c token_list_utils.c utils.c > total_code.txt

#include "../include/minishell.h"

void builtin_end(t_data *data, int error)
{
    if (error == 0)
        data->exit_status = 0;
    else
    {
        printf("Error: %s\n", strerror(error));
        data->exit_status = error;
    }
    //E2BIG = Argument list too long
}

int is_a_builtin(t_cmd *cmd)
{
    if((ft_strcmp(cmd->array_cmd[0], "echo") == 0) ||
    (ft_strcmp(cmd->array_cmd[0], "pwd") == 0) ||
    (ft_strcmp(cmd->array_cmd[0], "cd") == 0) ||
    (ft_strcmp(cmd->array_cmd[0], "env") == 0) ||
    (ft_strcmp(cmd->array_cmd[0], "export") == 0) ||
    (ft_strcmp(cmd->array_cmd[0], "unset") == 0) ||
    (ft_strcmp(cmd->array_cmd[0], "exit") == 0))
        return (1);
    else
        return (0);
}
void exec_builtin(t_cmd *cmd)
{
    if(ft_strcmp(cmd->array_cmd[0], "echo") == 0)
        ft_echo(cmd);
    else if(ft_strcmp(cmd->array_cmd[0], "pwd") == 0)
        ft_pwd(cmd);
    else if (ft_strcmp(cmd->array_cmd[0], "cd") == 0)
        ft_cd(cmd);
    else if (ft_strcmp(cmd->array_cmd[0], "env") == 0)
        ft_env(cmd);
    else if (ft_strcmp(cmd->array_cmd[0], "export") == 0)
        ft_export(cmd);
    else if (ft_strcmp(cmd->array_cmd[0], "unset") == 0)
        ft_unset(cmd);
    else if (ft_strcmp(cmd->array_cmd[0], "exit") == 0)
        ft_exit(cmd);
}

char *ft_var_name(char *name_value)
{
    int i;
    
    i = 0;
    while (name_value[i] != '=' && name_value[i] != '\0')
        i++;
    return (ft_substr(name_value, 0, i));
}
char *ft_var_value(char *name_value)//Obtiene el var_value de una var_name en una cadena del array env concreto
{
    int i;

    i = 0;
    while (name_value[i] != '=' && name_value[i] != '\0')
        i++;
    return (ft_substr(name_value, i + 1, ft_strlen(name_value) - i));
}

char *ft_getenv(char *var_name, char **env)//obtiene el valor de una variable de entre todas las variables de entorno a partir de su nombre
{
    int i;
    i = 0;
    while (env[i])
    {
        if ((ft_strncmp(env[i], var_name, ft_strlen(var_name)) == 0) && env[i][ft_strlen(var_name)] == '=') //Si el nombre de la variable coincide con el principio de la cadena y el siguiente caracter es un = entonces es la variable que buscamos
            return (ft_var_value(env[i]));
        i++;
    }
    return ("\0");
}

char **insert_var(char **array, char *var_name, char *var_value)
{
    int i;
    char **new_array;
    char *temp;

    i = 0;
    while(array[i])
    {
        if (ft_strncmp(array[i], var_name, ft_strlen(var_name)) == 0)
        {
            free(array[i]);
            temp = ft_strjoin(var_name, "=");
            array[i] = ft_strjoin(temp, var_value);
            free(temp);
            return (array);
        }
        i++;
    }
    new_array = realloc_elonged_array(array);
    temp = ft_strjoin(var_name, "=");
    new_array[i] = ft_strjoin(temp, var_value);
    new_array[i + 1] = NULL;
    free_array(array);
    free(temp);
    return (new_array);
}



#include "../include/minishell.h"

t_cmd *new_cmd(char **array_cmds, t_data *data)
{
	t_cmd *new_cmd;

	new_cmd = malloc(sizeof(t_cmd));
	new_cmd->array_cmd = array_cmds;
	new_cmd->fd_in = STDIN_FILENO;
	new_cmd->fd_out = STDOUT_FILENO;
	new_cmd->redir_list = NULL;
	new_cmd->data = data;
	new_cmd->next = NULL;
	return (new_cmd);
}

t_cmd *add_cmd(t_cmd *cmd_list, t_cmd *new_cmd)
{
	t_cmd *p;

	if (cmd_list == NULL)
	{
		new_cmd->index = 0;
		return (new_cmd);
	}
	p = cmd_list;
	while (p->next)
		p = p->next;
	p->next = new_cmd;
	new_cmd->index = cmd_list_len(cmd_list)- 1;
	return (cmd_list);
}
t_cmd *get_last_cmd(t_cmd *cmd_list)
{
	t_cmd *p;

	p = cmd_list;
	if (p == NULL)
		return (NULL);
	while (p->next)
		p = p->next;
	return (p);
}

t_cmd *get_cmd_by_index(t_cmd *cmd_list, int index)
{
	t_cmd *p;

	p = cmd_list;
	if (p == NULL)
		return (NULL);
	while (p)
	{
		if (p->index == index)
			return (p);
		p = p->next;
	}
	return (NULL);
}

int cmd_list_len(t_cmd *cmd_list)
{
	t_cmd *p;
	int len;

	len = 0;
	p = cmd_list;
	if (p == NULL)
		return (0);
	while (p)
	{
		len++;
		p = p->next;
	}
	return (len);
}
t_cmd *free_cmd_list(t_cmd *cmd_list)
{
	t_cmd *p;
	t_cmd *tmp;

	p = cmd_list;
	while (p)
	{
		tmp = p->next;
		if (p->redir_list)
			p->redir_list = free_redir_list(p->redir_list);
		free_cmd(p);
		p = tmp;
	}
	return (NULL);
}
void free_cmd(t_cmd *cmd)
{
	if (cmd->array_cmd)
		free_array(cmd->array_cmd);
	if (cmd->redir_list)
		free_redir_list(cmd->redir_list);
	free(cmd);
	cmd = NULL;
}#include "../include/minishell.h"

int is_last_cmd(t_cmd *cmd)
{
    if(cmd->next == NULL)
        return (1);
    return (0);
}
int is_first_cmd(t_cmd *cmd)
{
    if(cmd->index == 0)
        return (1);
    return (0);
}

void child(t_cmd *cmd, int *fd_in, int *fd_out, t_data *data)
{
    char *path;
    // Configura la salida del proceso hijo
    if (is_last_cmd(cmd) == 0) // Si hay un comando siguiente
        *fd_out = data->pipe[1]; // Redirige la salida a la escritura de la tubería
    else
        *fd_out = STDOUT_FILENO; // Si es el último comando, redirige a la salida estándar
    dup2(*fd_in, STDIN_FILENO); // Redirige la entrada estándar a la salida del comando anterior
    dup2(*fd_out, STDOUT_FILENO); // Redirige la salida estándar al fd_out seleccionado
    close(data->pipe[0]); // Cierra el extremo de lectura de la tubería en el hijo
    if(is_a_builtin(cmd) == 1)
    {
        exec_builtin(cmd);
        exit_process(data, data->exit_status);
    }
    
    else
    {
        path = get_path(cmd->array_cmd[0], data->env); // Obtiene la ruta del comando
        execve(path, cmd->array_cmd, data->env); // Ejecuta el comando con execve
        printf("Comand not found\n");
        exit(127);
    }
}

void multiple_cmd_case(t_data *data)
{
    t_cmd *cmd;
    int fd_in;
    int fd_out;
    pid_t pid;
    int status;

    fd_out = STDOUT_FILENO;// Descriptor de archivo para la salida del último comando
    fd_in = STDIN_FILENO; // Descriptor de archivo para la entrada del primer comando
    cmd = data->cmd_list;
    while (cmd)
    {
        pipe(data->pipe); // Crea la tubería para el comando actual y el siguiente
        pid = fork(); // Crea un proceso hijo para ejecutar el comando
        if (pid == 0) //Hijo
            child(cmd, &fd_in, &fd_out, data);
        else //Padre
        {
            waitpid(pid, &status, 0); //El exit status es una info que se tiene que interpretar con la macro WIFEXITED
            data->exit_status = WEXITSTATUS(status); //WEXITSTATUS es una macro que devuelve el exit status del hijo
            close(data->pipe[1]); // Cierra el extremo de escritura de la tubería en el padre
            // Actualiza fd_in para el próximo comando, usando el extremo de lectura actual
            fd_in = data->pipe[0];
            cmd = cmd->next;
        }
    }
}

void apply_INPUT_redir(t_cmd *cmd, t_redir *redir)
{
    printf("dentro de apply_input_redir\n");
    cmd->fd_in = open(redir->in_name, O_RDONLY);
    if (cmd->fd_in == -1)
    {
        printf("Error opening file\n");
        free_data(cmd->data);
        exit(1);
    }
}
void apply_OUTPUT_redir(t_cmd *cmd, t_redir *redir)
{
    cmd->fd_out = open(redir->out_name, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (cmd->fd_out == -1)
    {
        printf("Error opening file\n");
        free_data(cmd->data);
        exit(1);
    }
}

void apply_APPEND_redir(t_cmd *cmd, t_redir *redir)
{
    cmd->fd_out = open(redir->out_name, O_WRONLY | O_CREAT | O_APPEND, 0644);
    if (cmd->fd_out == -1)
    {
        printf("Error opening file\n");
        free_data(cmd->data);
        exit(1);
    }
}
void apply_HERE_DOC_redir(t_cmd *cmd)
{
    char *line;
    char *temp_file;
    int here_doc_fd;
    int i;

    printf("dentro de apply_here_doc_redir\n");
    i = 0;
    temp_file = ".temp_file.txt"; //Usamos un archivo temporal para guardar la info del here_doc
    line = NULL;//por si acaso
    here_doc_fd = open(temp_file, O_WRONLY | O_CREAT | O_TRUNC, 0644); //primero abro el archivo solo para escritura, lo creo si no exite, es oculto
    if(here_doc_fd == -1)
    {
        printf("Error opening file\n");
        free_data(cmd->data);
        exit(1);
    }
    while(1) //Leo las lineas hasta que encuentre el delimitador. va escribiendo lo que recibe readline en el archivo temporal
    {
        line = readline("heredoc> ");
        if(line == NULL)
        {
            printf("warning: here-document at line %i delimited by end-of-file (wanted `%s')\n", i, cmd->redir_list->delim);
            break;
        }
        if(ft_strcmp(line, cmd->redir_list->delim) == 0)
            break;
        ft_putstr_fd("dentro del bucle\n", 1);
        write(here_doc_fd, line, ft_strlen(line));
        write(here_doc_fd, "\n", 1);
        free(line);
        i++;
    }
    ft_putstr_fd("fuera del bucle\n", 1);
    free(line);//hay que hacerlo otra vez porque cuando se sale del bucle no se libera la ultima linea
    close(here_doc_fd); // lo cerramos para volver a abrirlo pero en modo lectura
    cmd->fd_in = open(temp_file, O_RDONLY);
    if(cmd->fd_in == -1)
    {
        printf("Error opening file\n");
        free_data(cmd->data);
        exit(1);
    }
    if (unlink(temp_file) == -1) //borra el archivo pero la info de dentro sigue siendo accesible en teoria (y de hecho funciona xD)
    {
        printf("Error deleting file\n");
        close(cmd->fd_in);
        free_data(cmd->data);
        exit(1);
    }
    //al final de apply_redir_list se hace el dup2 del fdin que tiene la info del here_doc
}

// void apply_redir_list(t_cmd *cmd) //primera version no sobreescribe bien redirecciones del mismo tipo
// {
//     t_redir *redir;

//     redir = cmd->redir_list;
//     while (redir)
//     {
//         if (redir->type == INPUT)
//             apply_INPUT_redir(cmd, redir);
//         else if (redir->type == OUTPUT)
//             apply_OUTPUT_redir(cmd, redir);
//         else if (redir->type == APPEND)
//             apply_APPEND_redir(cmd, redir);
//         else if(redir->type == HERE_DOC)
//             apply_HERE_DOC_redir(cmd);
//         redir = redir->next;
//     }
//     if (dup2(cmd->fd_in, STDIN_FILENO) == -1)
//     {
//         printf("Error duplicating file descriptor\n");
//         free_data(cmd->data);
//         exit(1);
//     }
//     if (dup2(cmd->fd_out, STDOUT_FILENO) == -1)
//     {
//         printf("Error duplicating file descriptor\n");
//         free_data(cmd->data);
//         exit(1);
//     }
// }

void apply_last_out_redir(t_cmd *cmd)
{
    t_redir *redir;
    t_redir *last_out_redir;

    last_out_redir = NULL;
    redir = cmd->redir_list;
    while (redir)
    {
        if (redir->type == OUTPUT || redir->type == APPEND)
            last_out_redir = redir;
        redir = redir->next;
    }
    if (last_out_redir != NULL)
    {
        if (last_out_redir->type == OUTPUT)
            apply_OUTPUT_redir(cmd, last_out_redir);
        else if (last_out_redir->type == APPEND)
            apply_APPEND_redir(cmd, last_out_redir);
    } else
        cmd->fd_out = 1;
}

void apply_last_in_redir(t_cmd *cmd)
{
    t_redir *redir;
    t_redir *last_in_redir;

    last_in_redir = NULL;
    redir = cmd->redir_list;
    while (redir)
    {
        if (redir->type == INPUT || redir->type == HERE_DOC)
            last_in_redir = redir;
        redir = redir->next;
    }
    print_redir(last_in_redir);
    if (last_in_redir != NULL)
    {
        if (last_in_redir->type == INPUT)
            apply_INPUT_redir(cmd, last_in_redir);
        else if (last_in_redir->type == HERE_DOC)
            apply_HERE_DOC_redir(cmd);
    } else
        cmd->fd_in = 0;
    print_cmd(cmd);
}

void apply_redir_list(t_cmd *cmd)
{
    apply_last_in_redir(cmd);
    apply_last_out_redir(cmd);
    if (cmd->fd_in != 0)
    {
        if (dup2(cmd->fd_in, STDIN_FILENO) == -1)
        {
            printf("Error duplicating file descriptor\n");
            free_data(cmd->data);
            exit(1);
        }
    }
    if (cmd->fd_out != 1)
    {
        if (dup2(cmd->fd_out, STDOUT_FILENO) == -1)
        {
            printf("Error duplicating file descriptor\n");
            free_data(cmd->data);
            exit(1);
        }
    }
}

void one_builtin_case(t_cmd *cmd)
{
    int stdin_copy;
    int stdout_copy;

    stdin_copy = dup(STDIN_FILENO);
    stdout_copy = dup(STDOUT_FILENO);
    apply_redir_list(cmd);
    exec_builtin(cmd);
    close(cmd->fd_in);
    close(cmd->fd_out);
    dup2(stdin_copy, STDIN_FILENO);
    dup2(stdout_copy, STDOUT_FILENO);
}

void one_cmd_case(t_data *data)
{
    t_cmd *cmd;
    pid_t pid;
    char *path;
    int status;

    cmd = data->cmd_list;
    if(is_a_builtin(cmd) == 1)
        one_builtin_case(cmd);
    else
    {
        pid = fork();
        if(pid == 0)
        {
            if(cmd->redir_list)
                apply_redir_list(cmd);
            path = get_path(cmd->array_cmd[0], data->env);
            execve(path, cmd->array_cmd, data->env);
            printf("Comand not found\n");//esto solo ocurre si el execve falla
            exit(127);
        }
        else
        {
            waitpid(pid, &status, 0); //El exit status es una info que se tiene que interpretar con la macro WIFEXITED
            data->exit_status = WEXITSTATUS(status); //WEXITSTATUS es una macro que devuelve el exit status del hijo
        }
    }
}
void basic_parsing(t_data *data)
{
    char **array_pipes;
    int i = 0;
    array_pipes = ft_split(data->input, '|');
    while(array_pipes[i])
    {
        data->cmd_list = add_cmd(data->cmd_list, new_cmd(ft_split(array_pipes[i], ' '), data));
        i++;
    }
    free_array(array_pipes);
}
void prueba_ejecucion(t_data *data)
{
    basic_parsing(data);
    // add_redir(get_cmd_by_index(data->cmd_list, 0), new_redir(OUTPUT, "out_file2.txt"));
    // add_redir(get_cmd_by_index(data->cmd_list, 0), new_redir(APPEND, "out_file2.txt"));
    // add_redir(get_cmd_by_index(data->cmd_list, 0), new_redir(INPUT, "in_file.txt"));
    add_redir(get_cmd_by_index(data->cmd_list, 0), new_redir(INPUT, "in_file2.txt"));
    add_redir(get_cmd_by_index(data->cmd_list, 0), new_redir(HERE_DOC, "delim"));
    //add_redir(get_cmd_by_index(data->cmd_list, 0), new_redir(INPUT, "in_file1.txt"));
    if (cmd_list_len(data->cmd_list) == 1)
        one_cmd_case(data);
    else
        multiple_cmd_case(data);
}
#include "../include/minishell.h"

void ft_cd_home(t_data *data, char* oldpwd, char* pwd)
{
    char *home;

    home = ft_getenv("HOME", data->env);
    if (chdir(home) != 0)
    {
        free(oldpwd);
        free(pwd);
        builtin_end(data, errno);
        return;
    }
    else
    {
        data->env = insert_var(data->env, "OLDPWD", oldpwd);
        data->array_var = insert_var(data->array_var, "OLDPWD", oldpwd);
        getcwd(pwd, 1024);
        data->env = insert_var(data->env, "PWD", pwd);
        data->array_var = insert_var(data->array_var, "PWD", pwd);
        free(home);
        free(pwd);
        free(oldpwd);
        builtin_end(data, errno);
    }
}
void ft_cd(t_cmd *cmd)
{
    char *oldpwd;
    char *pwd;
    
    if (array_len(cmd->array_cmd) > 2)
    {
        builtin_end(cmd->data, E2BIG); //E2BIG = Argument list too long
        return;
    }
    oldpwd = malloc(sizeof(char)* 1024);
    pwd = malloc(sizeof(char)* 1024);
    getcwd(oldpwd, 1024);
    if (cmd->array_cmd[1] == NULL || ft_strcmp(cmd->array_cmd[1], "~") == 0)
    {
        ft_cd_home(cmd->data, oldpwd, pwd);
        return;
    }
    if (chdir(cmd->array_cmd[1]) != 0)
    {
        free(oldpwd);
        free (pwd);
        builtin_end(cmd->data, errno);
        return;
    }
    else
    {
        cmd->data->env = insert_var(cmd->data->env, "OLDPWD", oldpwd);
        cmd->data->array_var = insert_var(cmd->data->array_var, "OLDPWD", oldpwd);
        getcwd(pwd, 1024);
        cmd->data->env = insert_var(cmd->data->env, "PWD", pwd);
        cmd->data->array_var = insert_var(cmd->data->array_var, "PWD", pwd);
        free(pwd);
        free(oldpwd);
        builtin_end(cmd->data, errno);
    }
}
#include "../include/minishell.h"

int has_variable(char *input)//Mira si hay un $ en la cadena
{
    int i = 0;
    while (input[i] != '\0')
    {
        if (input[i] == '$' && input[i + 1] != '\0' && input[i + 1] != ' ')
            return (1);
        i++;
    }
    return (0);
}
char *get_exp_var(char *s, int i)//De la palabra que empieza por $ devuelve el nombre de la variable (es decir lo que hay después de $ lo que llamamos var_name)
{
    unsigned int start;
    char *var;

    start = i;
    while(s[i] != ' ' && s[i] != '\0')
        i++;
    var = ft_substr(s, start, i-start);
    return (var);
}
void print_expanded(char *input, char **env)//Imprime una palabra con una variable expandida
{
    int i;
    char *var_name;

    i = 0;
    while (input[i] != '\0')
    {
        if (input[i] == '$')
        {
            i++;
            var_name = get_exp_var(input, i);//aloca una subcadena desde despues de $ hasta el siquiente espacio o \0 por lo que devuelve el nombre de la variable a imprimir
            //if(ft_getenv(var_name, env) != NULL)
            ft_printf("%s", ft_getenv(var_name, env));//imprime el valor de la variable
            free(var_name);
            return;
        }
        else
            ft_printf("%c", input[i]);            
        i++;
    }
}

void ft_echo(t_cmd *cmd) //he usado ft_printf en vez de printf porque por problemas de como guarda el buffer printf no me hacia bien el -n
{
    int n_flag;

    int i = 1;
    n_flag = 0;
    if (array_len(cmd->array_cmd) >= 2 && ft_strcmp(cmd->array_cmd[1], "-n") == 0)
    {
        n_flag = 1;
        i = 2;
    }
    while(cmd->array_cmd[i] != NULL)
    {
        if(ft_strcmp(cmd->array_cmd[i], "$?") == 0)
            printf("Exit status: %i", cmd->data->exit_status);
        else
        if(has_variable(cmd->array_cmd[i]) == 0) //si no tiene $
            ft_printf("%s", cmd->array_cmd[i]);//imprimimos la palabra tal cual
        else
            print_expanded(cmd->array_cmd[i], cmd->data->env);//imprme la palabra sustituyendo lo que hay después de $ por el valor de la variable 
        if (cmd->array_cmd[i + 1] != NULL) //pone los espacios entre las palabras a menos que sea el final
            ft_printf(" ");
        i++;
    }
    if(n_flag == 0) //Si la flag no se ha cambiado imprime salto de linea//
        ft_printf("\n");
    builtin_end(cmd->data, 0);
}
#include "../include/minishell.h"

void print_env(char **array)
{
    int i = 0;
    while (array[i])
    {
        printf("%s\n", array[i]);
        i++;
    }
}

void ft_env(t_cmd *cmd)
{
    print_env(cmd->data->env);
    builtin_end(cmd->data, 0);
}#include "../include/minishell.h"

int is_a_num(const char *str)
{
    int i;

    i = 0;
    if (str[i] == '-')
        i++;
    while (str[i])
    {
        if (ft_isdigit(str[i]) == 0)
            return (0);
        i++;
    }
    return (1);
}
int i_to_exit_status(int exit_status)
{
    if (exit_status < 0) //si es negativo se le resta a 256
        exit_status = 256 + exit_status;
    if (exit_status > 255)//si es mayor que 255 se le hace el modulo 256
        exit_status = exit_status % 256;
    return (exit_status);
}

void ft_exit(t_cmd *cmd)
{
    int exit_status;

    printf("exit");
    if (array_len(cmd->array_cmd) == 1)
        exit_status = 0;
    else if ((array_len(cmd->array_cmd) == 2) ||
    (array_len(cmd->array_cmd) > 2 && is_a_num(cmd->array_cmd[1]) == 0))
    {
        if (is_a_num(cmd->array_cmd[1]) == 0)
        {
            printf(": %s: numeric argument required", cmd->array_cmd[1]);
            exit_status = 2;
        } else
            exit_status = i_to_exit_status(ft_atoi(cmd->array_cmd[1]));
    }else if (is_a_num(cmd->array_cmd[1]) == 1)
    {
            builtin_end(cmd->data, E2BIG);
            return ;
    }
    printf("\n");
    free_data(cmd->data);
    exit(exit_status);
}
#include "../include/minishell.h"

void print_export(char **array_var)
{
    int i;

    i = 0;
    while (array_var[i])
    {
        if(ft_strlen(ft_var_value(array_var[i])) == 0)
            printf("declare -x %s\n", ft_var_name(array_var[i]));
        else
            printf("declare -x %s=\"%s\"\n", ft_var_name(array_var[i]), ft_var_value(array_var[i]));//el printf asi es para que imprima las comillas qque cuando ejecutas export se muestranb
        i++;
    }
}

void ft_export(t_cmd *cmd)
{
    char *var_name;
    char *var_value;
    int i;

    if(cmd->array_cmd[1] == NULL)
    {
        print_export(cmd->data->array_var);
        return;
    }
    i = 1;
    while (cmd->array_cmd[i])
    {
        var_name = ft_var_name(cmd->array_cmd[i]);
        var_value = ft_var_value(cmd->array_cmd[i]);
        //if comprobaciones porque hay variables que se incluyen en export y no en env por ejemplo si está vacía $export a="", esto aparece en export pero no en env
        cmd->data->env = insert_var(cmd->data->env, var_name, var_value);
        cmd->data->array_var = insert_var(cmd->data->array_var, var_name, var_value);
        i++;
    }
    free(var_name);
    free(var_value);
    builtin_end(cmd->data, 0);
}
#include "../include/minishell.h"

void ft_pwd(t_cmd *cmd)
{
    char *dir;

    dir = malloc(sizeof(char)* 1024);
    getcwd(dir, 1024);
    printf("%s\n", dir);
    free(dir);
    builtin_end(cmd->data, 0);
}#include "../include/minishell.h"

void delete_var(char **array, char *var_name)
{
    int i;
    int j;
    int len;

    i = 0;
    len = ft_strlen(var_name);
    while (array[i])
    {
        if (ft_strncmp(array[i], var_name, len) == 0 && array[i][len] == '=')
        {
            free(array[i]);
            j = i;
            while (array[j])
            {
                array[j] = array[j + 1];
                j++;
            }
            return;
        }
        i++;
    }
}

void ft_unset(t_cmd *cmd)
{
    int i;

    i = 1;
    while(cmd->array_cmd[i])
    {
        delete_var(cmd->data->env, cmd->array_cmd[i]);
        delete_var(cmd->data->array_var, cmd->array_cmd[i]);
        i++;
    }
    builtin_end(cmd->data, 0);
}#include "../include/minishell.h"

int	only_spaces(char *input)
{
	int	i;

	i = 0;
	while (input[i] != '\0')
	{
		if (input[i] != ' ')
			return (0);
		i++;
	}
	return (1);
}

void	history(char *input)
{
	if (input != NULL && ft_strlen(input) != 0 && only_spaces(input) == 0)
		add_history(input);
}

void	init_data(t_data *data, char **env)
{
	data->env = copy_alloc_array(env);
	data->array_var = copy_alloc_array(env);
	sort_strings(data->array_var, array_len(data->array_var));
	data->input = NULL;
	data->cmd_list = NULL;
	data->exit_status = -1;
	data->token_list = NULL;
	data->parsing_error = 0;
	//data-> pipe = NULL;
}
void    free_data(t_data *data)
{
	//Está por rellenar
	if(data->env)
		free_array(data->env);
	if(data->array_var)
		free_array(data->array_var);
	if(data->cmd_list)
		free_cmd_list(data->cmd_list);
	if(data->token_list)
		free_token_list(data->token_list);
    free(data->input);
}
void reboot_data(t_data *data)
{
	if(data->input)
		free(data->input);
	if(data->cmd_list)
		data->cmd_list = free_cmd_list(data->cmd_list);
	if(data->token_list)
		data->token_list = free_token_list(data->token_list);
	data->input = NULL;
	data->cmd_list = NULL;
	data->token_list = NULL;
	data->parsing_error = 0;
}

int	main(int argc, char** argv, char **env)
{
	t_data	data;
	argc ++; //esto es para que no me salte un warning de que argc y argv no se usa y el primer argumento siempre tiene que ser de tipo int. Es para coger el env.
	argv[1] = "avoid warning";
	init_data(&data, env);
	signals();
	while (1)
	{
		data.input = readline("MiniShell> ");
		if (data.input == NULL)
			break ;
		history(data.input);
		//parsing(&data);
		//if(data.parsing_error == 0)
		prueba_ejecucion(&data);
		reboot_data(&data);
	}
    free_data(&data);
	printf("Saliendo de MiniShell\n");
	return (0);
}
#include "../include/minishell.h"


// void parsing(t_data *data)
// {
//     data->array_input = ft_split(data->input, ' ');
//     printf("Array de input:\n");
//     print_array(data->array_input);
//     printf("---------------------\n");
// }
#include "../include/minishell.h"

char	*get_path_line(char **env)
{
	char	*path_line;
	int		i;

	i = 0;
	while (env[i])
	{
		if (ft_strncmp(env[i], "PATH=", 5) == 0)
			path_line = env[i];
		i++;
	}
	path_line = path_line + 5;
	return (path_line);
}

char	*get_path(char *command, char **env)
{
	char	*path_line;
	char	**path_array;
	char	*path_final;
	int		i;
	char	*temp;

	i = 0;
	if (command[0] == '/')
		return (command);
	path_line = get_path_line(env);
	path_array = ft_split(path_line, ':');
	while (path_array[i])
	{
		temp = ft_strjoin(path_array[i], "/");
		path_final = ft_strjoin(temp, command);
		free(temp);
		if (access(path_final, F_OK) == 0)
			return (path_final);
		free(path_final);
		i++;
	}
	free_array(path_array);
	return (NULL);
}#include "../include/minishell.h"

void print_token_list(t_token *token_list)
{
    t_token *p;
	
	p = token_list;
	printf("+++++++++++++++TOKEN_LIST+++++++++++++++\n");
    if (!p)
    {
        printf("Empty token_list\n");
        return;
    }
    while (p)
    {
        printf("[%i]Token: %s\n",p->index, token_type_to_string(p->token_type));
        p = p->next;
    }
	printf("+++++++++++++++++++++++++++++++++++++++\n\n");
}
char *token_type_to_string(t_token_type token_type)
{
	if (token_type == CMD)
		return ("CMD");
	else if (token_type == PIPE)
		return ("PIPE");
	else if (token_type == REDIR)
		return ("REDIR");
	return ("UNKNOWN");
}
void print_cmd_list(t_cmd *cmd_list)
{
	t_cmd *p;

	p = cmd_list;
	printf("+++++++++++++++CMD_LIST+++++++++++++++\n");
	if (!p)
	{
		printf("Empty cmd_list\n");
		return;
	}
	while (p)
	{
		print_cmd(p);
		print_redir_list(p->redir_list);
		p = p->next;
	}
	printf("+++++++++++++++++++++++++++++++++++++++\n\n");
}
void print_cmd(t_cmd *cmd)
{
	printf("------------[%i]CMD---------------- \n", cmd->index);
	print_array(cmd->array_cmd);
	printf("fd_in: %i\n", cmd->fd_in);
	printf("fd_out: %i\n", cmd->fd_out);
	printf("\n");
}

void print_redir(t_redir *redir)
{
	if(redir==NULL)
	{
		printf("Empty redir\n");
		return;
	}
	printf("[%i]Redir:\n", redir->index);
	printf("-Type: %s\n", redir_type_to_string(redir->type));
	printf("-In_name: %s\n", redir->in_name);
	printf("-Out_name: %s\n", redir->out_name);
	printf("-Delim: %s\n", redir->delim);
	printf("-fd_in: %i\n", redir->fd_in);
	printf("-fd_out: %i\n", redir->fd_out);
}

void print_redir_list(t_redir *redir_list)
{
	t_redir *p;

	p = redir_list;
	printf("+REDIR_LIST+\n");
	if (!p)
	{
		printf("Empty redir_list\n");
		return;
	}
	while (p)
	{	
		print_redir(p);
		p = p->next;
	}
	printf("+++++++++++++++++++++++++++++++++++++++\n\n");
}
char *redir_type_to_string(t_redir_type type)
{
	if (type == INPUT)
		return ("INPUT");
	else if (type == OUTPUT)
		return ("OUTPUT");
	else if (type == APPEND)
		return ("APPEND");
	else if (type == HERE_DOC)
		return ("HERE_DOC");
	return ("UNKNOWN");
}

void instrucciones_ejemplo_listas(t_data *data)
{
	//INSTRUCCIONES DE COMO USAR LAS LISTAS

	//LISTA DE TOKENS
	////Para añadir tokens igualamos la data->token_list a la función add_token y le pasamos el tipo de token que queremos añadir
	data->token_list = add_token(data->token_list, CMD);
	data->token_list = add_token(data->token_list, PIPE);
	data->token_list = add_token(data->token_list, REDIR);
	////Para imprimir tenemos print_token_list
	print_token_list(data->token_list);
	////Para liberar la memoria de la lista de tokens igualamos data->token_list a la función free_token_list
	data->token_list = free_token_list(data->token_list);

	//LISTA DE COMANDOS
	//Para añadir comandos hay dos opciones:

	//1ºOPCION.
	////1.-. Crear un cmd* con new_cmd, que recibe un array de strings con el comando y sus argumentos, lo podemos modificar como queramos accediendo a sus campos
	////NUEVO!!!! -> Ahora new_cmd recibe también la data para enlazar su cmd->data con la data que le pasamos
	t_cmd *cmd = new_cmd(ft_split("ls -l", ' '), data);
	////Igualamos data->cmd_list a la función add_cmd, que recibe la lista de comandos y el comando que queremos añadir
	data->cmd_list = add_cmd(data->cmd_list, cmd);

	//2ºOPCION.
	////Hacerlo todo a la vez del tirón, es decir igualar y usar el new_cmd en la misma línea
	////NUEVO!!!! -> Ahora new_cmd recibe también la data para enlazar su cmd->data con la data que le pasamos
	data->cmd_list = add_cmd(data->cmd_list, new_cmd(ft_split("ls -l", ' '), data));

	//Modificar un comando de la lista. Para esto tenemos dos funciones
	//GET_CMD_BY_INDEX: Para modificar un comando concreto de la lista usamos get_cmd_by_index, que recibe la lista de comandos y el índice del comando que queremos modificar
	t_cmd *cmd_to_modify = get_cmd_by_index(data->cmd_list, 0);
	//Ahora podemos modificar el comando como queramos
	cmd_to_modify->fd_in = 3;
	cmd_to_modify->fd_out = 4;
	//GET_LAST_CMD: Para modificar el último comando de la lista usamos get_last_cmd, que recibe la lista de comandos
	t_cmd *last_cmd = get_last_cmd(data->cmd_list);
	//Ahora podemos modificar el comando como queramos
	last_cmd->fd_in = 5;
	last_cmd->fd_out = 6;

	////REDIRECCIONES
	//A un comando concreto (ya se el último o el que queramos obtener con el índice) le añadimos redirecciones con la función add_redir
	//NUEVO ahora al hacer new_redir le pasamos el tipo y el nombre del archivo (la función se encarga de guardarala en in_name o out_name en función del tipo) Si es Heredoc lo se le megte es el delimitador o end_marker
	add_redir(get_last_cmd(data->cmd_list), new_redir(HERE_DOC, NULL));//al último le añadimos una primera redirección de tipo HERE_DOC
	add_redir(get_last_cmd(data->cmd_list), new_redir(OUTPUT, "out4.txt")); //al último le añadimos una segunda redirección de tipo OUTPUT
	add_redir(get_cmd_by_index(data->cmd_list, 0), new_redir(INPUT, "in1.txt"));//al comando con índice 0 le añadimos una redirección de tipo INPUT
	add_redir(get_cmd_by_index(data->cmd_list, 0), new_redir(APPEND, "out.txt"));//al comando con índice 0 le añadimos una redirección de tipo APPEND


	//Para imprimir la lista de comandos usamos print_cmd_list (te imprime tambien las redirecciones si las hay)
	print_cmd_list(data->cmd_list);

	//Para liberar la memoria de las listas usamos free_cmd_list igualandola a las lista original
	data->cmd_list = free_cmd_list(data->cmd_list);

	//Esto es para comprobar que están vacías
	print_token_list(data->token_list);
	print_cmd_list(data->cmd_list);

}#include "../include/minishell.h"

t_redir *new_redir(t_redir_type type, char *input) //la input es siempre un char * que dependiendo del tipo de redirecion se guarda como nombre del archivo de salida o de entrada o como el delimitador del heredoc
{
	t_redir *new_redir;

	new_redir = malloc(sizeof(t_redir));
	new_redir->type = type;
	new_redir->in_name = NULL;
	new_redir->out_name = NULL;
	new_redir->delim = NULL;
	if (type == INPUT)
		new_redir->in_name = input;
	else if (type == OUTPUT || type == APPEND)
		new_redir->out_name = input;
	else if (type == HERE_DOC)
		new_redir->delim = input;
	new_redir->fd_in = STDIN_FILENO;
	new_redir->fd_out = STDOUT_FILENO;
	new_redir->data = NULL;
	new_redir->next = NULL;
	return (new_redir);
}

void update_index_redir_list(t_redir *redir_list)
{
	t_redir *p;
	int i;

	i = 0;
	p = redir_list;
	if (p == NULL)
		return ;
	while (p)
	{
		p->index = i;
		i++;
		p = p->next;
	}
}
void add_redir(t_cmd *cmd, t_redir *redir)
{
	t_redir *p;

	if (cmd->redir_list == NULL)
	{
		cmd->redir_list = redir;
		return ;
	}
	p = cmd->redir_list;
	while (p->next)
		p = p->next;
	p->next = redir;
	update_index_redir_list(cmd->redir_list);
}
t_redir *free_redir_list(t_redir *redir_list)
{
	t_redir *p;
	t_redir *tmp;

	p = redir_list;
	while (p)
	{
		tmp = p->next;
		free(p);
		p = tmp;
	}
	return (NULL);
}#include "../include/minishell.h"

void signals(void)
{
	signal(SIGINT, handle_ctrl_c); // Ctrl+C imprime una nueva entrada en una línea nueva.
	signal(SIGQUIT, SIG_IGN); // Ctrl+\ debe ignorarse.
 	signal(SIGTSTP, SIG_IGN); // Ctrl+Z debe ignorarse.
    //Ctrl+D debe cerrar el programa. Pero esto no lo hacemos con las señales porque cuando pulsamos ctrl+d es como si por readline le metieramos Null y entonces el bucle principal del main se cierra.
}

void	handle_ctrl_c(int signal)
{
	(void)signal;
	write(1, "\n", 1);
	rl_replace_line("", 1); // el 1 es clear_undo = 1, un modo para que no podamos dehacer lo escrito en la line (no tenemos que implementarlo en el proyecto)
	rl_on_new_line();
}
#include "../include/minishell.h"

t_token *add_token(t_token *token_list, t_token_type token_type)
{
    t_token *new_token;
	t_token *p;

	new_token = malloc(sizeof(t_token));
    new_token->token_type = token_type;
    new_token->next = NULL;
    // Si la lista está vacía, el nuevo token es el primero
    if (token_list == NULL)
	{
		new_token->index = 0;
        return (new_token);
	}
    // Si la lista ya tiene elementos, recorre hasta el final y añade el nuevo token
    p = token_list;
    while (p->next)
        p = p->next;
    p->next = new_token;
	new_token->index = token_list_len(token_list) - 1;
    return (token_list);
}

int token_list_len(t_token *token_list)
{
	t_token *p;
	int len;

	len = 0;
	p = token_list;
	if (p == NULL)
		return (0);
	while (p)
	{
		len++;
		p = p->next;
	}
	return (len);
}

t_token *free_token_list(t_token *token_list)
{
	t_token *p;
	t_token *tmp;

	p = token_list;
	while (p)
	{
		tmp = p->next;
		free(p);
		p = tmp;
	}
	return (NULL);
	}#include "../include/minishell.h"

void exit_process(t_data *data, int exit_status)
{
    free_data(data);
    exit(exit_status);
}

void print_array(char **array)
{
    int i = 0;
    while (array[i])
    {
        printf("[%i]: %s\n", i, array[i]);
        i++;
    }
}
void	free_array(char **array)
{
	int	i;

	i = 0;
	while (array[i] != NULL)
	{
		free(array[i]);
		i++;
	}
	free(array);
    array = NULL;
}
char **copy_alloc_array(char **array)
{
	int i = 0;
	char **new_array;
	while (array[i])
		i++;
	new_array = malloc(sizeof(char *) * (i + 1));
	i = 0;
	while (array[i])
	{
		new_array[i] = ft_strdup(array[i]);
		i++;
	}
	new_array[i] = NULL;
	return (new_array);
}
int array_len(char **array)
{
	int i = 0;
	while (array[i] != NULL)
		i++;
	return (i);
}
void swap(char **a, char **b)
{// Función para intercambiar dos cadenas
    char *temp = *a;
    *a = *b;
    *b = temp;
}

// Función para ordenar las cadenas en orden alfabético (usando bubble sort)
void sort_strings(char **array, int size)
{
    int i, j;
    for (i = 0; i < size - 1; i++) {
        for (j = 0; j < size - i - 1; j++) {
            // Usamos ft_strncmp para comparar las cadenas
            if (ft_strncmp(array[j], array[j + 1], 100) > 0) {
                swap(&array[j], &array[j + 1]);
            }
        }
    }
}
int ft_strcmp(const char *s1, const char *s2)
{
	int i;
	i = 0;
	while (s1[i] && s2[i] && s1[i] == s2[i])
		i++;
	return ((unsigned char)s1[i] - (unsigned char)s2[i]);
}
char **realloc_elonged_array(char **src_array)
{
    int len = array_len(src_array);
    // Reservar memoria para un nuevo array con una posición extra (len + 2 para el NULL final)
    char **new_array = malloc((len + 2) * sizeof(char *));
    if (!new_array)
        return NULL;

    // Copiar los elementos del array original al nuevo array
    for (int i = 0; i < len; i++)
    {
        new_array[i] = malloc(strlen(src_array[i]) + 1);
        if (!new_array[i])
        {
            // Liberar memoria en caso de fallo para evitar leaks
            while (--i >= 0)
                free(new_array[i]);
            free(new_array);
            return NULL;
        }
        ft_strlcpy(new_array[i], src_array[i], strlen(src_array[i]) + 1);
    }

    // Asignar el último elemento como NULL para finalizar el array
    new_array[len] = NULL;
    new_array[len + 1] = NULL;
    return (new_array);
}
